from rest_framework import serializers
from rest_framework.exceptions import ValidationError
from .models import Server, Device
from django.utils import timezone


ALLOWED_TRANSITIONS = {
    'stopped': ['starting'],
    'starting': ['running', 'error'],  
    'running': ['stopped'],
    'error': ['starting'],
}

class ServerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Server
        fields = ['id', 'name', 'subdomain', 'status', 'created_at', 'device']
        # set fields below to read_only to ensure they're autogenerated
        read_only_fields = ['id', 'subdomain', 'created_at']

# Using this serializer during PATCH to only allow the 'status' field to be changed
class ServerStatusUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Server
        fields = ['status']

    # Ensures transition in status is valid per ALLOWED_TRANSITIONS
    def validate_status(self, new_status):
        instance = self.instance
        current_status = instance.status

        # Check if the new status is a valid transition
        allowed = ALLOWED_TRANSITIONS.get(current_status, [])
        if new_status not in allowed:
            raise ValidationError(
                f"Cannot change status from '{current_status}' to '{new_status}'."
            )
        return new_status
    
    def update(self, instance, validated_data):
        new_status = validated_data.get("status")

        # assign the server to any online device
        if new_status == "starting":
            # find an online device
            device = Device.objects.filter(is_online=True).first()

            if device: # an online device was found
                # Update last_seen field in device and assign it to server
                device.last_seen = timezone.now()
                device.save(update_fields=["last_seen"])
                instance.device = device
                instance.status = "running"
            else:
                # Set server status to Error
                instance.device = None
                instance.status = "error"

        elif new_status == "stopped":
            # Unlink device, set server status to Stopped
            instance.device = None
            instance.status = "stopped"
        
        else:
            instance.status = new_status

        instance.save()
        return instance


        
